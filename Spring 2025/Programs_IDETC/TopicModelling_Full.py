import osimport pandas as pdimport refrom sklearn.feature_extraction.text import CountVectorizerfrom sklearn.decomposition import LatentDirichletAllocation# Pathsinput_csv_path = r"D:\OneDrive\Academic History\Research\NLP-Driven Sustainable Design_CoDesign Lab\Co-Design Lab\Databases_IDETC\V1 Merged with Product Group\filtered_data.csv"output_dir = r"D:\OneDrive\Academic History\Research\NLP-Driven Sustainable Design_CoDesign Lab\Co-Design Lab\Databases_IDETC\V1 Merged with Product Group\Modelled Topics\Full"# Ensure output directory existsos.makedirs(output_dir, exist_ok=True)# Load the datasetdf = pd.read_csv(input_csv_path, encoding='ISO-8859-1')# Preprocess contentdf["content"] = (    df["content"].fillna('')    .str.lower()    .str.replace(r'\W', ' ', regex=True)    .str.replace(r'\s+', ' ', regex=True))# Function to perform LDAdef run_lda(texts, num_topics=5):    if len(texts) < 5:        return ["Not enough data for LDA."]    min_df = 2 if len(texts) >= 10 else 1    max_df = 0.95 if len(texts) >= 10 else 0.8    vectorizer = CountVectorizer(max_df=max_df, min_df=min_df, stop_words='english')    try:        X = vectorizer.fit_transform(texts)    except ValueError:        return ["LDA skipped due to insufficient word frequency."]    lda = LatentDirichletAllocation(n_components=num_topics, random_state=42)    lda.fit(X)    feature_names = vectorizer.get_feature_names_out()    topics = []    for idx, topic in enumerate(lda.components_):        topic_words = ", ".join([feature_names[i] for i in topic.argsort()[:-11:-1]])        topics.append(f"Topic {idx + 1}: {topic_words}")    return topics# Run LDA by product_type and save resultsfor product_type, group_df in df.groupby("product_type"):    texts = group_df["content"].tolist()    lda_topics = run_lda(texts)    output_file = os.path.join(output_dir, f"{product_type.replace(' ', '_')}_LDA_Topics.txt")    with open(output_file, "w", encoding="utf-8") as f:        for topic in lda_topics:            f.write(topic + "\n")print("âœ… LDA topic modeling completed for each product_type.")